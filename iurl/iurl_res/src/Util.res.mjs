// Generated by ReScript, PLEASE EDIT WITH CARE


function fromQS(searchParams) {
  let dict = {};
  let entries = searchParams.entries();
  let arr = Array.from(entries);
  return arr.reduce((d, param) => {
    let key = param[0];
    let value = param[1];
    let oldValue = d[key];
    if (oldValue !== undefined) {
      oldValue.push(value);
    } else {
      d[key] = [value];
    }
    return d;
  }, dict);
}

function urlToObj0(url, tf) {
  return {
    protocol: url.protocol,
    host: url.host,
    port: url.port,
    pathname: url.pathname,
    searchParams: tf(url.searchParams),
    hash: url.hash
  };
}

function urlToObj(url, modeOpt) {
  let mode = modeOpt !== undefined ? modeOpt : "Qs";
  if (mode === "Qs") {
    return urlToObj0(url, fromQS);
  } else {
    return urlToObj0(url, prim => Object.fromEntries(prim));
  }
}

export {
  urlToObj,
}
/* No side effect */
